2019-09-15 20:22:33: process controller: api.js...
2019-09-15 20:22:33: register URL mapping: GET /api/products
2019-09-15 20:22:34: register URL mapping: GET /api
2019-09-15 20:22:34: process controller: user.js...
2019-09-15 20:22:56: Load ./config-default.js...
2019-09-15 20:22:56: Cannot load ./config-override.js.
2019-09-15 20:22:56: init sequelize
2019-09-15 20:22:58: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:22:59: eddc49af-0cbb-4abf-8936-fe401f7b86f2 8888
2019-09-15 20:22:60: register URL mapping: GET /api/user/:id
2019-09-15 20:22:60: register URL mapping: POST /api/login
2019-09-15 20:22:60: register URL mapping: POST /api/register
2019-09-15 20:22:39: process controller: api.js...
2019-09-15 20:22:39: register URL mapping: GET /api/products
2019-09-15 20:22:39: register URL mapping: GET /api
2019-09-15 20:22:39: process controller: user.js...
2019-09-15 20:22:62: Load ./config-default.js...
2019-09-15 20:22:62: Cannot load ./config-override.js.
2019-09-15 20:22:62: init sequelize
2019-09-15 20:22:64: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:22:64: 8e487491-fdff-49b6-9d19-63ae96df60e4 8888
2019-09-15 20:22:65: register URL mapping: GET /api/user/:id
2019-09-15 20:22:65: register URL mapping: POST /api/login
2019-09-15 20:22:65: register URL mapping: POST /api/register
2019-09-15 20:22:42: process controller: api.js...
2019-09-15 20:22:43: register URL mapping: GET /api/products
2019-09-15 20:22:43: register URL mapping: GET /api
2019-09-15 20:22:43: process controller: user.js...
2019-09-15 20:22:65: Load ./config-default.js...
2019-09-15 20:22:65: Cannot load ./config-override.js.
2019-09-15 20:22:65: init sequelize
2019-09-15 20:22:67: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:22:67: 62f2f539-e8da-49ef-a047-f71b5a7bc1a4 8888
2019-09-15 20:22:68: register URL mapping: GET /api/user/:id
2019-09-15 20:22:68: register URL mapping: POST /api/login
2019-09-15 20:22:68: register URL mapping: POST /api/register
2019-09-15 20:23:43: process controller: api.js...
2019-09-15 20:23:43: register URL mapping: GET /api/products
2019-09-15 20:23:44: register URL mapping: GET /api
2019-09-15 20:23:44: process controller: user.js...
2019-09-15 20:23:66: Load ./config-default.js...
2019-09-15 20:23:66: Cannot load ./config-override.js.
2019-09-15 20:23:66: init sequelize
2019-09-15 20:23:68: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:23:68: d31278c6-2d7f-4054-8011-42dfcff3fe8c 8888
2019-09-15 20:23:69: register URL mapping: GET /api/user/:id
2019-09-15 20:23:69: register URL mapping: POST /api/login
2019-09-15 20:23:69: register URL mapping: POST /api/register
2019-09-15 20:23:45: process controller: api.js...
2019-09-15 20:23:45: register URL mapping: GET /api/products
2019-09-15 20:23:45: register URL mapping: GET /api
2019-09-15 20:23:45: process controller: user.js...
2019-09-15 20:23:67: Load ./config-default.js...
2019-09-15 20:23:67: Cannot load ./config-override.js.
2019-09-15 20:23:67: init sequelize
2019-09-15 20:23:69: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:23:69: a5ee0e7a-7b90-4b67-b41a-cee8d5751ff9 8888
2019-09-15 20:23:71: register URL mapping: GET /api/user/:id
2019-09-15 20:23:71: register URL mapping: POST /api/login
2019-09-15 20:23:71: register URL mapping: POST /api/register
2019-09-15 20:24:41: process controller: api.js...
2019-09-15 20:24:41: register URL mapping: GET /api/products
2019-09-15 20:24:41: register URL mapping: GET /api
2019-09-15 20:24:41: process controller: user.js...
2019-09-15 20:24:64: Load ./config-default.js...
2019-09-15 20:24:64: Cannot load ./config-override.js.
2019-09-15 20:24:64: init sequelize
2019-09-15 20:24:66: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:24:66: e0155135-b87a-4810-9daf-e06dbe7cd739 8888
2019-09-15 20:24:67: register URL mapping: GET /api/user/:id
2019-09-15 20:24:67: register URL mapping: POST /api/login
2019-09-15 20:24:67: register URL mapping: POST /api/register
2019-09-15 20:24:44: process controller: api.js...
2019-09-15 20:24:44: register URL mapping: GET /api/products
2019-09-15 20:24:44: register URL mapping: GET /api
2019-09-15 20:24:44: process controller: user.js...
2019-09-15 20:24:68: Load ./config-default.js...
2019-09-15 20:24:68: Cannot load ./config-override.js.
2019-09-15 20:24:68: init sequelize
2019-09-15 20:24:70: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:24:70: 7577b8ba-f138-4f14-968e-a72c2beb9bf2 8888
2019-09-15 20:24:71: register URL mapping: GET /api/user/:id
2019-09-15 20:24:71: register URL mapping: POST /api/login
2019-09-15 20:24:71: register URL mapping: POST /api/register
2019-09-15 20:24:29: process controller: api.js...
2019-09-15 20:24:29: register URL mapping: GET /api/products
2019-09-15 20:24:29: register URL mapping: GET /api
2019-09-15 20:24:29: process controller: user.js...
2019-09-15 20:24:51: Load ./config-default.js...
2019-09-15 20:24:51: Cannot load ./config-override.js.
2019-09-15 20:24:51: init sequelize
2019-09-15 20:24:54: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:24:54: a6095e20-ce50-4b3c-8ce2-6823d3d540dd 8888
2019-09-15 20:24:55: register URL mapping: GET /api/user/:id
2019-09-15 20:24:55: register URL mapping: POST /api/login
2019-09-15 20:24:55: register URL mapping: POST /api/register
2019-09-15 20:25:42: process controller: api.js...
2019-09-15 20:25:42: register URL mapping: GET /api/products
2019-09-15 20:25:42: register URL mapping: GET /api
2019-09-15 20:25:42: process controller: user.js...
2019-09-15 20:25:63: Load ./config-default.js...
2019-09-15 20:25:65: Cannot load ./config-override.js.
2019-09-15 20:25:65: init sequelize
2019-09-15 20:25:67: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:25:67: b60cb802-9420-4c7d-b459-91b6d0f37430 8888
2019-09-15 20:25:68: register URL mapping: GET /api/user/:id
2019-09-15 20:25:68: register URL mapping: POST /api/login
2019-09-15 20:25:68: register URL mapping: POST /api/register
2019-09-15 20:25:43: process controller: api.js...
2019-09-15 20:25:43: register URL mapping: GET /api/products
2019-09-15 20:25:43: register URL mapping: GET /api
2019-09-15 20:25:43: process controller: user.js...
2019-09-15 20:25:65: Load ./config-default.js...
2019-09-15 20:25:65: Cannot load ./config-override.js.
2019-09-15 20:25:65: init sequelize
2019-09-15 20:25:67: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:25:67: 422d1c24-c951-4e6e-829f-3ecfeb5c2850 8888
2019-09-15 20:25:68: register URL mapping: GET /api/user/:id
2019-09-15 20:25:68: register URL mapping: POST /api/login
2019-09-15 20:25:68: register URL mapping: POST /api/register
2019-09-15 20:26:45: process controller: api.js...
2019-09-15 20:26:45: register URL mapping: GET /api/products
2019-09-15 20:26:45: register URL mapping: GET /api
2019-09-15 20:26:45: process controller: user.js...
2019-09-15 20:26:67: Load ./config-default.js...
2019-09-15 20:26:67: Cannot load ./config-override.js.
2019-09-15 20:26:67: init sequelize
2019-09-15 20:26:69: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:26:69: 526baeda-db30-49b2-b329-ac9b66cdb2d6 8888
2019-09-15 20:26:70: register URL mapping: GET /api/user/:id
2019-09-15 20:26:70: register URL mapping: POST /api/login
2019-09-15 20:26:70: register URL mapping: POST /api/register
2019-09-15 20:26:29: process controller: api.js...
2019-09-15 20:27:45: process controller: api.js...
2019-09-15 20:27:46: register URL mapping: GET /api/products
2019-09-15 20:27:46: register URL mapping: GET /api
2019-09-15 20:27:46: process controller: user.js...
2019-09-15 20:27:67: Load ./config-default.js...
2019-09-15 20:27:68: Cannot load ./config-override.js.
2019-09-15 20:27:68: init sequelize
2019-09-15 20:27:70: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:27:70: 7594acf7-31ba-407d-ae98-9c5758d7913b 8888
2019-09-15 20:27:71: register URL mapping: GET /api/user/:id
2019-09-15 20:27:71: register URL mapping: POST /api/login
2019-09-15 20:27:71: register URL mapping: POST /api/register
2019-09-15 20:27:45: process controller: api.js...
2019-09-15 20:27:45: register URL mapping: GET /api/products
2019-09-15 20:27:45: register URL mapping: GET /api
2019-09-15 20:27:45: process controller: user.js...
2019-09-15 20:27:68: Load ./config-default.js...
2019-09-15 20:27:68: Cannot load ./config-override.js.
2019-09-15 20:27:69: init sequelize
2019-09-15 20:27:71: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:27:71: 9abe0c4d-e642-480c-ab8d-cc862e1e4bf5 8888
2019-09-15 20:27:72: register URL mapping: GET /api/user/:id
2019-09-15 20:27:72: register URL mapping: POST /api/login
2019-09-15 20:27:72: register URL mapping: POST /api/register
2019-09-15 20:28:42: process controller: api.js...
2019-09-15 20:28:42: register URL mapping: GET /api/products
2019-09-15 20:28:42: register URL mapping: GET /api
2019-09-15 20:28:42: process controller: user.js...
2019-09-15 20:28:64: Load ./config-default.js...
2019-09-15 20:28:64: Cannot load ./config-override.js.
2019-09-15 20:28:64: init sequelize
2019-09-15 20:28:66: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:28:67: 1eeadc51-cf68-4112-b320-e564c97eef3e 8888
2019-09-15 20:28:68: register URL mapping: GET /api/user/:id
2019-09-15 20:28:68: register URL mapping: POST /api/login
2019-09-15 20:28:68: register URL mapping: POST /api/register
2019-09-15 20:28:43: process controller: api.js...
2019-09-15 20:28:44: register URL mapping: GET /api/products
2019-09-15 20:28:44: register URL mapping: GET /api
2019-09-15 20:28:44: process controller: user.js...
2019-09-15 20:28:65: Load ./config-default.js...
2019-09-15 20:28:67: Cannot load ./config-override.js.
2019-09-15 20:28:67: init sequelize
2019-09-15 20:28:69: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:28:69: 8b10d9ac-3218-44b5-9182-4054042965cd 8888
2019-09-15 20:28:70: register URL mapping: GET /api/user/:id
2019-09-15 20:28:70: register URL mapping: POST /api/login
2019-09-15 20:28:70: register URL mapping: POST /api/register
2019-09-15 20:29:43: process controller: api.js...
2019-09-15 20:29:43: register URL mapping: GET /api/products
2019-09-15 20:29:43: register URL mapping: GET /api
2019-09-15 20:29:43: process controller: user.js...
2019-09-15 20:29:64: Load ./config-default.js...
2019-09-15 20:29:64: Cannot load ./config-override.js.
2019-09-15 20:29:64: init sequelize
2019-09-15 20:29:67: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:29:67: 8bb64718-0968-44b4-9c07-ee6d5fd0895d 8888
2019-09-15 20:29:68: register URL mapping: GET /api/user/:id
2019-09-15 20:29:68: register URL mapping: POST /api/login
2019-09-15 20:29:68: register URL mapping: POST /api/register
2019-09-15 20:29:44: process controller: api.js...
2019-09-15 20:29:44: register URL mapping: GET /api/products
2019-09-15 20:29:44: register URL mapping: GET /api
2019-09-15 20:29:44: process controller: user.js...
2019-09-15 20:29:66: Load ./config-default.js...
2019-09-15 20:29:66: Cannot load ./config-override.js.
2019-09-15 20:29:66: init sequelize
2019-09-15 20:29:68: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:29:68: 63073ad0-d90c-438e-9182-418521c5a151 8888
2019-09-15 20:29:69: register URL mapping: GET /api/user/:id
2019-09-15 20:29:69: register URL mapping: POST /api/login
2019-09-15 20:29:69: register URL mapping: POST /api/register
2019-09-15 20:30:42: process controller: api.js...
2019-09-15 20:30:43: register URL mapping: GET /api/products
2019-09-15 20:30:43: register URL mapping: GET /api
2019-09-15 20:30:43: process controller: user.js...
2019-09-15 20:30:65: Load ./config-default.js...
2019-09-15 20:30:65: Cannot load ./config-override.js.
2019-09-15 20:30:66: init sequelize
2019-09-15 20:30:68: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:30:68: 6e6e54ba-aaa1-42fd-b7db-13ff0a7d8133 8888
2019-09-15 20:30:69: register URL mapping: GET /api/user/:id
2019-09-15 20:30:69: register URL mapping: POST /api/login
2019-09-15 20:30:69: register URL mapping: POST /api/register
2019-09-15 20:30:43: process controller: api.js...
2019-09-15 20:30:44: register URL mapping: GET /api/products
2019-09-15 20:30:44: register URL mapping: GET /api
2019-09-15 20:30:44: process controller: user.js...
2019-09-15 20:30:67: Load ./config-default.js...
2019-09-15 20:30:67: Cannot load ./config-override.js.
2019-09-15 20:30:67: init sequelize
2019-09-15 20:30:69: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:30:69: a680e2da-6d81-44b6-a971-7a45aa72d390 8888
2019-09-15 20:30:70: register URL mapping: GET /api/user/:id
2019-09-15 20:30:70: register URL mapping: POST /api/login
2019-09-15 20:30:70: register URL mapping: POST /api/register
2019-09-15 20:31:44: process controller: api.js...
2019-09-15 20:31:44: register URL mapping: GET /api/products
2019-09-15 20:31:44: register URL mapping: GET /api
2019-09-15 20:31:44: process controller: user.js...
2019-09-15 20:31:65: Load ./config-default.js...
2019-09-15 20:31:67: Cannot load ./config-override.js.
2019-09-15 20:31:67: init sequelize
2019-09-15 20:31:69: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:31:69: 4df0af69-b51e-45fa-86cb-161296734800 8888
2019-09-15 20:31:70: register URL mapping: GET /api/user/:id
2019-09-15 20:31:70: register URL mapping: POST /api/login
2019-09-15 20:31:70: register URL mapping: POST /api/register
2019-09-15 20:31:44: process controller: api.js...
2019-09-15 20:31:44: register URL mapping: GET /api/products
2019-09-15 20:31:44: register URL mapping: GET /api
2019-09-15 20:31:44: process controller: user.js...
2019-09-15 20:31:66: Load ./config-default.js...
2019-09-15 20:31:66: Cannot load ./config-override.js.
2019-09-15 20:31:66: init sequelize
2019-09-15 20:31:68: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:31:69: 83d80880-45b5-4834-9dad-c358a2c6f7cc 8888
2019-09-15 20:31:70: register URL mapping: GET /api/user/:id
2019-09-15 20:31:70: register URL mapping: POST /api/login
2019-09-15 20:31:70: register URL mapping: POST /api/register
2019-09-15 20:32:43: process controller: api.js...
2019-09-15 20:32:43: register URL mapping: GET /api/products
2019-09-15 20:32:43: register URL mapping: GET /api
2019-09-15 20:32:43: process controller: user.js...
2019-09-15 20:32:66: Load ./config-default.js...
2019-09-15 20:32:66: Cannot load ./config-override.js.
2019-09-15 20:32:66: init sequelize
2019-09-15 20:32:68: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:32:68: ab7f4626-2e03-4065-8451-d25144aa9b27 8888
2019-09-15 20:32:69: register URL mapping: GET /api/user/:id
2019-09-15 20:32:69: register URL mapping: POST /api/login
2019-09-15 20:32:69: register URL mapping: POST /api/register
2019-09-15 20:32:45: process controller: api.js...
2019-09-15 20:32:45: register URL mapping: GET /api/products
2019-09-15 20:32:45: register URL mapping: GET /api
2019-09-15 20:32:45: process controller: user.js...
2019-09-15 20:32:67: Load ./config-default.js...
2019-09-15 20:32:68: Cannot load ./config-override.js.
2019-09-15 20:32:68: init sequelize
2019-09-15 20:32:70: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:32:70: 6fa419a2-1447-41ef-9ee6-838b4ca99c0c 8888
2019-09-15 20:32:71: register URL mapping: GET /api/user/:id
2019-09-15 20:32:71: register URL mapping: POST /api/login
2019-09-15 20:32:71: register URL mapping: POST /api/register
2019-09-15 20:33:45: process controller: api.js...
2019-09-15 20:33:45: register URL mapping: GET /api/products
2019-09-15 20:33:45: register URL mapping: GET /api
2019-09-15 20:33:45: process controller: user.js...
2019-09-15 20:33:67: Load ./config-default.js...
2019-09-15 20:33:67: Cannot load ./config-override.js.
2019-09-15 20:33:68: init sequelize
2019-09-15 20:33:69: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:33:70: 52bef796-186c-4b88-981c-5155d73e8ee9 8888
2019-09-15 20:33:71: register URL mapping: GET /api/user/:id
2019-09-15 20:33:71: register URL mapping: POST /api/login
2019-09-15 20:33:71: register URL mapping: POST /api/register
2019-09-15 20:33:53: process controller: api.js...
2019-09-15 20:33:54: register URL mapping: GET /api/products
2019-09-15 20:33:54: register URL mapping: GET /api
2019-09-15 20:33:54: process controller: user.js...
2019-09-15 20:33:75: Load ./config-default.js...
2019-09-15 20:33:75: Cannot load ./config-override.js.
2019-09-15 20:33:75: init sequelize
2019-09-15 20:33:77: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:33:77: 4eed5445-04a0-4012-a0c2-26296126b9e2 8888
2019-09-15 20:33:78: register URL mapping: GET /api/user/:id
2019-09-15 20:33:79: register URL mapping: POST /api/login
2019-09-15 20:33:79: register URL mapping: POST /api/register
2019-09-15 20:34:58: process controller: api.js...
2019-09-15 20:35:42: process controller: api.js...
2019-09-15 20:36:53: process controller: api.js...
2019-09-15 20:42:78: process controller: api.js...
2019-09-15 20:42:78: register URL mapping: GET /api/products
2019-09-15 20:42:78: register URL mapping: GET /api
2019-09-15 20:42:78: process controller: user.js...
2019-09-15 20:42:04: Load ./config-default.js...
2019-09-15 20:42:04: Cannot load ./config-override.js.
2019-09-15 20:42:04: init sequelize
2019-09-15 20:42:06: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:42:06: a76d59a8-ddf8-44fd-930f-320631c1d0f7 8888
2019-09-15 20:42:07: register URL mapping: GET /api/user/:id
2019-09-15 20:42:07: register URL mapping: POST /api/login
2019-09-15 20:42:07: register URL mapping: POST /api/register
2019-09-15 20:42:39: process controller: api.js...
2019-09-15 20:42:39: register URL mapping: GET /api/products
2019-09-15 20:42:39: register URL mapping: GET /api
2019-09-15 20:42:39: process controller: user.js...
2019-09-15 20:42:63: Load ./config-default.js...
2019-09-15 20:42:63: Cannot load ./config-override.js.
2019-09-15 20:42:64: init sequelize
2019-09-15 20:42:66: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:42:66: 58f8295c-6688-4d75-91e7-19d23fecd5b6 8888
2019-09-15 20:42:67: register URL mapping: GET /api/user/:id
2019-09-15 20:42:67: register URL mapping: POST /api/login
2019-09-15 20:42:67: register URL mapping: POST /api/register
2019-09-15 20:43:58: process controller: api.js...
2019-09-15 20:43:59: register URL mapping: GET /api/products
2019-09-15 20:43:59: register URL mapping: GET /api
2019-09-15 20:43:59: process controller: user.js...
2019-09-15 20:43:85: Load ./config-default.js...
2019-09-15 20:43:85: Cannot load ./config-override.js.
2019-09-15 20:43:85: init sequelize
2019-09-15 20:43:87: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:43:87: 2abeb338-7d88-4b4d-880c-d007fedc79cf 8888
2019-09-15 20:43:88: register URL mapping: GET /api/user/:id
2019-09-15 20:43:88: register URL mapping: POST /api/login
2019-09-15 20:43:88: register URL mapping: POST /api/register
2019-09-15 20:43:15: { name: '17600000000', password: '123456' }
2019-09-15 20:43:23: Executing (default): SELECT `user_name`, `password`, `id`, `createdAt`, `updatedAt`, `version` FROM `user` AS `user` WHERE `user`.`user_name` = '17600000000' LIMIT 1;
2019-09-15 20:43:47: { name: '17600000000', password: '123456' }
2019-09-15 20:43:54: Executing (default): SELECT `user_name`, `password`, `id`, `createdAt`, `updatedAt`, `version` FROM `user` AS `user` WHERE `user`.`user_name` = '17600000000' LIMIT 1;
2019-09-15 20:43:59: process controller: api.js...
2019-09-15 20:43:59: register URL mapping: GET /api/products
2019-09-15 20:43:59: register URL mapping: GET /api
2019-09-15 20:43:59: process controller: user.js...
2019-09-15 20:43:80: Load ./config-default.js...
2019-09-15 20:43:80: Cannot load ./config-override.js.
2019-09-15 20:43:80: init sequelize
2019-09-15 20:43:83: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:43:83: 8a087cfb-a15a-4a42-818a-7549855e6ee6 8888
2019-09-15 20:43:84: register URL mapping: GET /api/user/:id
2019-09-15 20:43:84: register URL mapping: POST /api/login
2019-09-15 20:43:84: register URL mapping: POST /api/register
2019-09-15 20:43:26: { name: 'cz', password: '123456' }
2019-09-15 20:43:34: Executing (default): SELECT `user_name`, `password`, `id`, `createdAt`, `updatedAt`, `version` FROM `user` AS `user` WHERE `user`.`user_name` = 'cz' LIMIT 1;
2019-09-15 20:44:92: process controller: api.js...
2019-09-15 20:44:92: register URL mapping: GET /api/products
2019-09-15 20:44:92: register URL mapping: GET /api
2019-09-15 20:44:92: process controller: user.js...
2019-09-15 20:44:39: Load ./config-default.js...
2019-09-15 20:44:39: Cannot load ./config-override.js.
2019-09-15 20:44:39: init sequelize
2019-09-15 20:44:44: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:44:44: ba6c6f85-f3d6-4c23-9717-1cd90e4d978b 8888
2019-09-15 20:44:45: register URL mapping: GET /api/user/:id
2019-09-15 20:44:45: register URL mapping: POST /api/login
2019-09-15 20:44:45: register URL mapping: POST /api/register
2019-09-15 20:44:58: process controller: api.js...
2019-09-15 20:44:58: register URL mapping: GET /api/products
2019-09-15 20:44:58: register URL mapping: GET /api
2019-09-15 20:44:58: process controller: user.js...
2019-09-15 20:44:79: Load ./config-default.js...
2019-09-15 20:44:80: Cannot load ./config-override.js.
2019-09-15 20:44:81: init sequelize
2019-09-15 20:44:82: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:44:83: a95cda8f-75b0-4ed0-96e3-2e2d9232ac97 8888
2019-09-15 20:44:85: register URL mapping: GET /api/user/:id
2019-09-15 20:44:85: register URL mapping: POST /api/login
2019-09-15 20:44:85: register URL mapping: POST /api/register
2019-09-15 20:56:17: process controller: api.js...
2019-09-15 20:56:18: register URL mapping: GET /api/products
2019-09-15 20:56:18: register URL mapping: GET /api
2019-09-15 20:56:18: process controller: user.js...
2019-09-15 20:56:38: Load ./config-default.js...
2019-09-15 20:56:38: Cannot load ./config-override.js.
2019-09-15 20:56:38: init sequelize
2019-09-15 20:56:40: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:56:40: 018bbf09-9857-4171-850d-f893626e803a 8888
2019-09-15 20:56:41: register URL mapping: GET /api/user/:id
2019-09-15 20:56:41: register URL mapping: POST /api/login
2019-09-15 20:56:41: register URL mapping: POST /api/register
2019-09-15 20:56:91: { name: 'cz', password: '123456' }
2019-09-15 20:56:00: Executing (default): SELECT `user_name`, `password`, `id`, `createdAt`, `updatedAt`, `version` FROM `user` AS `user` WHERE `user`.`user_name` = 'cz' LIMIT 1;
2019-09-15 20:56:86: process controller: api.js...
2019-09-15 20:56:86: register URL mapping: GET /api/products
2019-09-15 20:56:86: register URL mapping: GET /api
2019-09-15 20:56:86: process controller: user.js...
2019-09-15 20:56:09: Load ./config-default.js...
2019-09-15 20:56:11: Cannot load ./config-override.js.
2019-09-15 20:56:11: init sequelize
2019-09-15 20:56:14: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:56:14: 6460a8df-91d8-4631-899a-33bdf1a2bb46 8888
2019-09-15 20:56:15: register URL mapping: GET /api/user/:id
2019-09-15 20:56:15: register URL mapping: POST /api/login
2019-09-15 20:56:15: register URL mapping: POST /api/register
2019-09-15 20:57:85: process controller: api.js...
2019-09-15 20:57:85: register URL mapping: GET /api/products
2019-09-15 20:57:85: register URL mapping: GET /api
2019-09-15 20:57:85: process controller: user.js...
2019-09-15 20:57:06: Load ./config-default.js...
2019-09-15 20:57:06: Cannot load ./config-override.js.
2019-09-15 20:57:06: init sequelize
2019-09-15 20:57:10: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:57:10: 52b4cf85-8d0b-4756-948e-4baab4e9afa7 8888
2019-09-15 20:57:11: register URL mapping: GET /api/user/:id
2019-09-15 20:57:11: register URL mapping: POST /api/login
2019-09-15 20:57:11: register URL mapping: POST /api/register
2019-09-15 20:57:83: process controller: api.js...
2019-09-15 20:57:83: register URL mapping: GET /api/products
2019-09-15 20:57:83: register URL mapping: GET /api
2019-09-15 20:57:83: process controller: user.js...
2019-09-15 20:57:06: Load ./config-default.js...
2019-09-15 20:57:06: Cannot load ./config-override.js.
2019-09-15 20:57:06: init sequelize
2019-09-15 20:57:08: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:57:08: 658ab5ee-48a6-4ccf-b7b9-3bdf6812b4a0 8888
2019-09-15 20:57:09: register URL mapping: GET /api/user/:id
2019-09-15 20:57:09: register URL mapping: POST /api/login
2019-09-15 20:57:09: register URL mapping: POST /api/register
2019-09-15 20:58:85: process controller: api.js...
2019-09-15 20:58:86: register URL mapping: GET /api/products
2019-09-15 20:58:86: register URL mapping: GET /api
2019-09-15 20:58:86: process controller: user.js...
2019-09-15 20:58:06: Load ./config-default.js...
2019-09-15 20:58:06: Cannot load ./config-override.js.
2019-09-15 20:58:06: init sequelize
2019-09-15 20:58:09: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:58:09: 0666d617-6cdf-4b9c-9bec-ec9ebdc31104 8888
2019-09-15 20:58:10: register URL mapping: GET /api/user/:id
2019-09-15 20:58:10: register URL mapping: POST /api/login
2019-09-15 20:58:10: register URL mapping: POST /api/register
2019-09-15 20:58:86: process controller: api.js...
2019-09-15 20:58:87: register URL mapping: GET /api/products
2019-09-15 20:58:87: register URL mapping: GET /api
2019-09-15 20:58:87: process controller: user.js...
2019-09-15 20:58:09: Load ./config-default.js...
2019-09-15 20:58:09: Cannot load ./config-override.js.
2019-09-15 20:58:10: init sequelize
2019-09-15 20:58:12: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:58:12: 591bcf96-495a-4fc2-8716-23df9554b94f 8888
2019-09-15 20:58:13: register URL mapping: GET /api/user/:id
2019-09-15 20:58:13: register URL mapping: POST /api/login
2019-09-15 20:58:13: register URL mapping: POST /api/register
2019-09-15 20:59:85: process controller: api.js...
2019-09-15 20:59:85: register URL mapping: GET /api/products
2019-09-15 20:59:85: register URL mapping: GET /api
2019-09-15 20:59:85: process controller: user.js...
2019-09-15 20:59:07: Load ./config-default.js...
2019-09-15 20:59:07: Cannot load ./config-override.js.
2019-09-15 20:59:07: init sequelize
2019-09-15 20:59:09: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:59:09: c2db1d6b-d98e-42a6-b17a-1f7d8a131375 8888
2019-09-15 20:59:10: register URL mapping: GET /api/user/:id
2019-09-15 20:59:10: register URL mapping: POST /api/login
2019-09-15 20:59:10: register URL mapping: POST /api/register
2019-09-15 20:59:87: process controller: api.js...
2019-09-15 20:59:87: register URL mapping: GET /api/products
2019-09-15 20:59:87: register URL mapping: GET /api
2019-09-15 20:59:87: process controller: user.js...
2019-09-15 20:59:09: Load ./config-default.js...
2019-09-15 20:59:09: Cannot load ./config-override.js.
2019-09-15 20:59:09: init sequelize
2019-09-15 20:59:12: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 20:59:12: 4c4eabf3-7060-4e9a-88ec-2649296510ab 8888
2019-09-15 20:59:13: register URL mapping: GET /api/user/:id
2019-09-15 20:59:13: register URL mapping: POST /api/login
2019-09-15 20:59:13: register URL mapping: POST /api/register
2019-09-15 21:00:84: process controller: api.js...
2019-09-15 21:00:84: register URL mapping: GET /api/products
2019-09-15 21:00:84: register URL mapping: GET /api
2019-09-15 21:00:84: process controller: user.js...
2019-09-15 21:00:06: Load ./config-default.js...
2019-09-15 21:00:06: Cannot load ./config-override.js.
2019-09-15 21:00:06: init sequelize
2019-09-15 21:00:08: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:00:08: fc4c19e6-ef4e-4084-9553-72d5a9f85992 8888
2019-09-15 21:00:09: register URL mapping: GET /api/user/:id
2019-09-15 21:00:09: register URL mapping: POST /api/login
2019-09-15 21:00:09: register URL mapping: POST /api/register
2019-09-15 21:00:86: process controller: api.js...
2019-09-15 21:00:86: register URL mapping: GET /api/products
2019-09-15 21:00:86: register URL mapping: GET /api
2019-09-15 21:00:86: process controller: user.js...
2019-09-15 21:00:08: Load ./config-default.js...
2019-09-15 21:00:08: Cannot load ./config-override.js.
2019-09-15 21:00:08: init sequelize
2019-09-15 21:00:11: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:00:11: 3ba20fb8-ef0a-49ad-8330-db82e95ae761 8888
2019-09-15 21:00:12: register URL mapping: GET /api/user/:id
2019-09-15 21:00:12: register URL mapping: POST /api/login
2019-09-15 21:00:12: register URL mapping: POST /api/register
2019-09-15 21:01:86: process controller: api.js...
2019-09-15 21:01:87: register URL mapping: GET /api/products
2019-09-15 21:01:87: register URL mapping: GET /api
2019-09-15 21:01:87: process controller: user.js...
2019-09-15 21:01:09: Load ./config-default.js...
2019-09-15 21:01:09: Cannot load ./config-override.js.
2019-09-15 21:01:09: init sequelize
2019-09-15 21:01:11: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:01:11: 23395e29-bae9-44d6-b80b-894fe957feec 8888
2019-09-15 21:01:12: register URL mapping: GET /api/user/:id
2019-09-15 21:01:12: register URL mapping: POST /api/login
2019-09-15 21:01:12: register URL mapping: POST /api/register
2019-09-15 21:01:85: process controller: api.js...
2019-09-15 21:01:85: register URL mapping: GET /api/products
2019-09-15 21:01:85: register URL mapping: GET /api
2019-09-15 21:01:85: process controller: user.js...
2019-09-15 21:01:07: Load ./config-default.js...
2019-09-15 21:01:07: Cannot load ./config-override.js.
2019-09-15 21:01:07: init sequelize
2019-09-15 21:01:10: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:01:10: daf63d7f-3e01-4955-a53c-971709856f20 8888
2019-09-15 21:01:11: register URL mapping: GET /api/user/:id
2019-09-15 21:01:11: register URL mapping: POST /api/login
2019-09-15 21:01:11: register URL mapping: POST /api/register
2019-09-15 21:02:84: process controller: api.js...
2019-09-15 21:02:84: register URL mapping: GET /api/products
2019-09-15 21:02:84: register URL mapping: GET /api
2019-09-15 21:02:84: process controller: user.js...
2019-09-15 21:02:06: Load ./config-default.js...
2019-09-15 21:02:06: Cannot load ./config-override.js.
2019-09-15 21:02:06: init sequelize
2019-09-15 21:02:08: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:02:08: 13863259-734a-4d81-8d50-904949911709 8888
2019-09-15 21:02:09: register URL mapping: GET /api/user/:id
2019-09-15 21:02:09: register URL mapping: POST /api/login
2019-09-15 21:02:10: register URL mapping: POST /api/register
2019-09-15 21:02:86: process controller: api.js...
2019-09-15 21:02:86: register URL mapping: GET /api/products
2019-09-15 21:02:86: register URL mapping: GET /api
2019-09-15 21:02:86: process controller: user.js...
2019-09-15 21:02:08: Load ./config-default.js...
2019-09-15 21:02:09: Cannot load ./config-override.js.
2019-09-15 21:02:09: init sequelize
2019-09-15 21:02:11: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:02:11: 9c384dc0-edcb-4452-ab67-28709c66f4c5 8888
2019-09-15 21:02:12: register URL mapping: GET /api/user/:id
2019-09-15 21:02:12: register URL mapping: POST /api/login
2019-09-15 21:02:12: register URL mapping: POST /api/register
2019-09-15 21:03:85: process controller: api.js...
2019-09-15 21:03:86: register URL mapping: GET /api/products
2019-09-15 21:03:86: register URL mapping: GET /api
2019-09-15 21:03:86: process controller: user.js...
2019-09-15 21:03:06: Load ./config-default.js...
2019-09-15 21:03:07: Cannot load ./config-override.js.
2019-09-15 21:03:07: init sequelize
2019-09-15 21:03:09: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:03:09: ac5f94ff-61f7-4aa3-a1db-bd886fac494e 8888
2019-09-15 21:03:10: register URL mapping: GET /api/user/:id
2019-09-15 21:03:10: register URL mapping: POST /api/login
2019-09-15 21:03:10: register URL mapping: POST /api/register
2019-09-15 21:03:89: process controller: api.js...
2019-09-15 21:03:90: register URL mapping: GET /api/products
2019-09-15 21:03:90: register URL mapping: GET /api
2019-09-15 21:03:90: process controller: user.js...
2019-09-15 21:03:12: Load ./config-default.js...
2019-09-15 21:03:12: Cannot load ./config-override.js.
2019-09-15 21:03:12: init sequelize
2019-09-15 21:03:14: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:03:14: ac077329-aafd-40fc-9564-1332b326f5dc 8888
2019-09-15 21:03:15: register URL mapping: GET /api/user/:id
2019-09-15 21:03:15: register URL mapping: POST /api/login
2019-09-15 21:03:15: register URL mapping: POST /api/register
2019-09-15 21:04:86: process controller: api.js...
2019-09-15 21:04:86: register URL mapping: GET /api/products
2019-09-15 21:04:86: register URL mapping: GET /api
2019-09-15 21:04:86: process controller: user.js...
2019-09-15 21:04:08: Load ./config-default.js...
2019-09-15 21:04:08: Cannot load ./config-override.js.
2019-09-15 21:04:08: init sequelize
2019-09-15 21:04:10: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:04:10: 5476a864-fd6e-453d-8a91-e74bc179067e 8888
2019-09-15 21:04:12: register URL mapping: GET /api/user/:id
2019-09-15 21:04:12: register URL mapping: POST /api/login
2019-09-15 21:04:12: register URL mapping: POST /api/register
2019-09-15 21:04:86: process controller: api.js...
2019-09-15 21:04:86: register URL mapping: GET /api/products
2019-09-15 21:04:86: register URL mapping: GET /api
2019-09-15 21:04:86: process controller: user.js...
2019-09-15 21:04:09: Load ./config-default.js...
2019-09-15 21:04:09: Cannot load ./config-override.js.
2019-09-15 21:04:09: init sequelize
2019-09-15 21:04:12: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:04:12: dd3fb671-63c1-4f22-917a-805a464bf66d 8888
2019-09-15 21:04:13: register URL mapping: GET /api/user/:id
2019-09-15 21:04:13: register URL mapping: POST /api/login
2019-09-15 21:04:13: register URL mapping: POST /api/register
2019-09-15 21:05:86: process controller: api.js...
2019-09-15 21:05:86: register URL mapping: GET /api/products
2019-09-15 21:05:86: register URL mapping: GET /api
2019-09-15 21:05:86: process controller: user.js...
2019-09-15 21:05:07: Load ./config-default.js...
2019-09-15 21:05:07: Cannot load ./config-override.js.
2019-09-15 21:05:07: init sequelize
2019-09-15 21:05:11: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:05:11: bff5b1df-fc86-4ccd-b4ba-8f0ca80cf341 8888
2019-09-15 21:05:12: register URL mapping: GET /api/user/:id
2019-09-15 21:05:12: register URL mapping: POST /api/login
2019-09-15 21:05:12: register URL mapping: POST /api/register
2019-09-15 21:05:85: process controller: api.js...
2019-09-15 21:05:86: register URL mapping: GET /api/products
2019-09-15 21:05:86: register URL mapping: GET /api
2019-09-15 21:05:86: process controller: user.js...
2019-09-15 21:05:08: Load ./config-default.js...
2019-09-15 21:05:08: Cannot load ./config-override.js.
2019-09-15 21:05:08: init sequelize
2019-09-15 21:05:11: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:05:11: 5570e0ec-d331-41ec-971f-be3c44bca4bc 8888
2019-09-15 21:05:12: register URL mapping: GET /api/user/:id
2019-09-15 21:05:12: register URL mapping: POST /api/login
2019-09-15 21:05:12: register URL mapping: POST /api/register
2019-09-15 21:06:85: process controller: api.js...
2019-09-15 21:06:86: register URL mapping: GET /api/products
2019-09-15 21:06:86: register URL mapping: GET /api
2019-09-15 21:06:86: process controller: user.js...
2019-09-15 21:06:08: Load ./config-default.js...
2019-09-15 21:06:08: Cannot load ./config-override.js.
2019-09-15 21:06:08: init sequelize
2019-09-15 21:06:11: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:06:11: 61afaae9-5154-49fa-88bc-b3d2c97780a1 8888
2019-09-15 21:06:12: register URL mapping: GET /api/user/:id
2019-09-15 21:06:12: register URL mapping: POST /api/login
2019-09-15 21:06:12: register URL mapping: POST /api/register
2019-09-15 21:06:86: process controller: api.js...
2019-09-15 21:06:86: register URL mapping: GET /api/products
2019-09-15 21:06:86: register URL mapping: GET /api
2019-09-15 21:06:86: process controller: user.js...
2019-09-15 21:06:10: Load ./config-default.js...
2019-09-15 21:06:10: Cannot load ./config-override.js.
2019-09-15 21:06:10: init sequelize
2019-09-15 21:06:12: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:06:13: de367f40-c62c-474a-9b52-786b5f5c078e 8888
2019-09-15 21:06:14: register URL mapping: GET /api/user/:id
2019-09-15 21:06:14: register URL mapping: POST /api/login
2019-09-15 21:06:14: register URL mapping: POST /api/register
2019-09-15 21:07:84: process controller: api.js...
2019-09-15 21:07:84: register URL mapping: GET /api/products
2019-09-15 21:07:84: register URL mapping: GET /api
2019-09-15 21:07:84: process controller: user.js...
2019-09-15 21:07:06: Load ./config-default.js...
2019-09-15 21:07:06: Cannot load ./config-override.js.
2019-09-15 21:07:06: init sequelize
2019-09-15 21:07:08: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:07:08: 835bd9aa-023f-488b-b946-35434d66ceec 8888
2019-09-15 21:07:09: register URL mapping: GET /api/user/:id
2019-09-15 21:07:09: register URL mapping: POST /api/login
2019-09-15 21:07:09: register URL mapping: POST /api/register
2019-09-15 21:07:85: process controller: api.js...
2019-09-15 21:07:85: register URL mapping: GET /api/products
2019-09-15 21:07:85: register URL mapping: GET /api
2019-09-15 21:07:85: process controller: user.js...
2019-09-15 21:07:08: Load ./config-default.js...
2019-09-15 21:07:08: Cannot load ./config-override.js.
2019-09-15 21:07:08: init sequelize
2019-09-15 21:07:10: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:07:10: a93bb975-2a8a-4299-80d1-db1db27cd904 8888
2019-09-15 21:07:11: register URL mapping: GET /api/user/:id
2019-09-15 21:07:11: register URL mapping: POST /api/login
2019-09-15 21:07:11: register URL mapping: POST /api/register
2019-09-15 21:08:86: process controller: api.js...
2019-09-15 21:08:86: register URL mapping: GET /api/products
2019-09-15 21:08:86: register URL mapping: GET /api
2019-09-15 21:08:86: process controller: user.js...
2019-09-15 21:08:08: Load ./config-default.js...
2019-09-15 21:08:08: Cannot load ./config-override.js.
2019-09-15 21:08:08: init sequelize
2019-09-15 21:08:10: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:08:10: dae1ac88-3790-4681-bece-2417412185b5 8888
2019-09-15 21:08:12: register URL mapping: GET /api/user/:id
2019-09-15 21:08:12: register URL mapping: POST /api/login
2019-09-15 21:08:12: register URL mapping: POST /api/register
2019-09-15 21:08:86: process controller: api.js...
2019-09-15 21:08:86: register URL mapping: GET /api/products
2019-09-15 21:08:86: register URL mapping: GET /api
2019-09-15 21:08:86: process controller: user.js...
2019-09-15 21:08:07: Load ./config-default.js...
2019-09-15 21:08:07: Cannot load ./config-override.js.
2019-09-15 21:08:07: init sequelize
2019-09-15 21:08:09: Sequelize {
  options:
   { dialect: 'mysql',
     dialectModulePath: null,
     host: '39.98.131.232',
     protocol: 'tcp',
     define: {},
     query: {},
     sync: {},
     timezone: '+00:00',
     logging: [Function: bound consoleCall],
     omitNull: false,
     native: false,
     replication: false,
     ssl: undefined,
     pool: { max: 5, min: 0, idle: 10000 },
     quoteIdentifiers: true,
     hooks: {},
     retry: { max: 5, match: [Array] },
     transactionType: 'DEFERRED',
     isolationLevel: 'REPEATABLE READ',
     databaseVersion: 0,
     typeValidation: false,
     benchmark: false },
  config:
   { database: 'test',
     username: 'root',
     password: 'Cuizhen123.',
     host: '39.98.131.232',
     port: 3306,
     pool: { max: 5, min: 0, idle: 10000 },
     protocol: 'tcp',
     native: false,
     ssl: undefined,
     replication: false,
     dialectModulePath: null,
     keepDefaultTimezone: undefined,
     dialectOptions: undefined },
  dialect:
   MysqlDialect {
     sequelize: [Circular],
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Circular],
        versionPromise: null,
        dialectName: 'mysql',
        onProcessExit: [Function: bound ],
        lib: [Object],
        pool: [Pool] },
     QueryGenerator:
      { options: [Object],
        extractTableDetails: [Function: extractTableDetails],
        addSchema: [Function: addSchema],
        dropSchema: [Function: dropSchema],
        createTableQuery: [Function: createTableQuery],
        versionQuery: [Function: versionQuery],
        describeTableQuery: [Function: describeTableQuery],
        dropTableQuery: [Function: dropTableQuery],
        renameTableQuery: [Function: renameTableQuery],
        showTablesQuery: [Function: showTablesQuery],
        addColumnQuery: [Function: addColumnQuery],
        removeColumnQuery: [Function: removeColumnQuery],
        changeColumnQuery: [Function: changeColumnQuery],
        renameColumnQuery: [Function: renameColumnQuery],
        insertQuery: [Function: insertQuery],
        bulkInsertQuery: [Function: bulkInsertQuery],
        updateQuery: [Function: updateQuery],
        upsertQuery: [Function: upsertQuery],
        deleteQuery: [Function: deleteQuery],
        incrementQuery: [Function: incrementQuery],
        nameIndexes: [Function: nameIndexes],
        addIndexQuery: [Function: addIndexQuery],
        showIndexesQuery: [Function: showIndexesQuery],
        removeIndexQuery: [Function: removeIndexQuery],
        attributesToSQL: [Function: attributesToSQL],
        findAutoIncrementField: [Function: findAutoIncrementField],
        quoteTable: [Function: quoteTable],
        quote: [Function: quote],
        createTrigger: [Function: createTrigger],
        dropTrigger: [Function: dropTrigger],
        renameTrigger: [Function: renameTrigger],
        createFunction: [Function: createFunction],
        dropFunction: [Function: dropFunction],
        renameFunction: [Function: renameFunction],
        quoteIdentifier: [Function: quoteIdentifier],
        quoteIdentifiers: [Function: quoteIdentifiers],
        escape: [Function: escape],
        getForeignKeysQuery: [Function: getForeignKeysQuery],
        dropForeignKeyQuery: [Function: dropForeignKeyQuery],
        selectQuery: [Function: selectQuery],
        getQueryOrders: [Function: getQueryOrders],
        selectFromTableFragment: [Function: selectFromTableFragment],
        joinIncludeQuery: [Function: joinIncludeQuery],
        setAutocommitQuery: [Function: setAutocommitQuery],
        setIsolationLevelQuery: [Function: setIsolationLevelQuery],
        startTransactionQuery: [Function: startTransactionQuery],
        deferConstraintsQuery: [Function: deferConstraintsQuery],
        setConstraintQuery: [Function: setConstraintQuery],
        setDeferredQuery: [Function: setDeferredQuery],
        setImmediateQuery: [Function: setImmediateQuery],
        commitTransactionQuery: [Function: commitTransactionQuery],
        rollbackTransactionQuery: [Function: rollbackTransactionQuery],
        addLimitAndOffset: [Function: addLimitAndOffset],
        handleSequelizeMethod: [Function: handleSequelizeMethod],
        whereQuery: [Function: whereQuery],
        whereItemsQuery: [Function: whereItemsQuery],
        whereItemQuery: [Function: whereItemQuery],
        getWhereConditions: [Function: getWhereConditions],
        booleanValue: [Function: booleanValue],
        dialect: 'mysql',
        createSchema: [Function: createSchema],
        showSchemasQuery: [Function: showSchemasQuery],
        attributeToSQL: [Function: attributeToSQL],
        getForeignKeyQuery: [Function: getForeignKeyQuery],
        _dialect: [Circular],
        sequelize: [Circular],
        typeValidation: undefined } },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular] },
  connectionManager:
   ConnectionManager {
     sequelize: [Circular],
     config:
      { database: 'test',
        username: 'root',
        password: 'Cuizhen123.',
        host: '39.98.131.232',
        port: undefined,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [Circular],
        QueryGenerator: [Object] },
     versionPromise: null,
     dialectName: 'mysql',
     onProcessExit: [Function: bound ],
     lib:
      { createConnection: [Function: createConnection],
        createPool: [Function: createPool],
        createPoolCluster: [Function: createPoolCluster],
        createQuery: [Function: createQuery],
        escape: [Function: escape],
        escapeId: [Function: escapeId],
        format: [Function: format] },
     pool:
      Pool {
        _factory: [Object],
        _inUseObjects: [],
        _draining: false,
        _waitingClients: [PriorityQueue],
        _availableObjects: [],
        _count: 0,
        _removeIdleTimer: null,
        _removeIdleScheduled: false } },
  importCache: {},
  test:
   { '$trackRunningQueries': false,
     '$runningQueries': 0,
     trackRunningQueries: [Function: trackRunningQueries],
     verifyNoRunningQueries: [Function: verifyNoRunningQueries] } }
2019-09-15 21:08:09: 3826cc55-3a59-420c-95c3-a54a6cd87e17 8888
2019-09-15 21:08:10: register URL mapping: GET /api/user/:id
2019-09-15 21:08:10: register URL mapping: POST /api/login
2019-09-15 21:08:10: register URL mapping: POST /api/register
